library(bladderbatch)
library(snpStats)
library(factoextra)
source("http://www.bioconductor.org/biocLite.R")
biocLite(c"sva","bladderbatch","snpStats"))
source("http://www.bioconductor.org/biocLite.R")
biocLite(c("sva","bladderbatch","snpStats"))
install.packages(c("factoextra"))
knitr::opts_chunk$set(echo = TRUE)
suppressMessages(library(org.Hs.eg.db))
suppressMessages(library(DOSE))
suppressMessages(library(pathview))
suppressMessages(library(purrr))
suppressMessages(library(clusterProfiler))
suppressMessages(library(annotables))
suppressMessages(library(enrichplot))
devtools::install_github("stephenturner/annotables")
suppressMessages(library(annotables))
?enrichGO
ego <- enrichGO(gene          = gene,
universe      = names(geneList),
OrgDb         = org.Hs.eg.db,
ont           = "CC",
pAdjustMethod = "BH",
pvalueCutoff  = 0.01,
qvalueCutoff  = 0.05,
readable      = TRUE)
data(geneList, package="DOSE")
gene <- names(geneList)[abs(geneList) > 2]
gene.df <- bitr(gene, fromType = "ENTREZID",
toType = c("ENSEMBL", "SYMBOL"),
OrgDb = org.Hs.eg.db)
head(gene.df)
library(Rcpp)
library(RcppArmadillo)
library(mvtnorm)
library(ggplot2)
# source("~/Google Drive/Research/Factor_analysis/gibbs_func_1marker.R")
Rcpp::sourceCpp("~/Google Drive/Research/Factor_analysis/rcpp_tutorials/gibbs_one_marker.cpp")
data_gen <- function(N,P,K,seed,beta_true,sigma_w2_true,pi_true,psi_true){
set.seed(seed)
G <- rbinom(N,1,0.5)
Phi <- matrix(rnorm(N*K,0,1),nrow = N, ncol = K) # Phi is fixed at ~ N(0,1)
Z_true <- outer(G,beta_true,FUN = '*') + Phi
# U_true <- matrix(rnorm(P*K,mean=0,sd=sqrt(sigma_w2_true)),nrow = P,ncol = K)
U_true <- matrix(0,nrow = P,ncol = K)
F_true <- matrix(0,nrow = P,ncol = K)
for (k in 1:K){
U_true[,k] <- rnorm(P,mean=0,sd=sqrt(sigma_w2_true[k]))
F_true[,k] <- rbinom(P,1,pi_true[k])
}
# F_true <- matrix(rbinom(P*K,1,pi_true),nrow = P,ncol = K)
W_true <- F_true*U_true
E <- matrix(rnorm(N*P,mean = 0,sd = sqrt(psi_true)),nrow = N, ncol = P)
Y <- Z_true%*%t(W_true) + E
return(list(G=G, Z=Z_true, U=U_true, F=F_true, Y=Y))
}
seed = 57380
sim.data <- data_gen(seed=seed, N=500, P=100, K=3, beta_true=c(0.5,0,0),
sigma_w2_true=c(1,1,1), pi_true=c(0.2,0.5,0.8), psi_true=1)
# res <- gibbs_single_var_cpp(K=3,Y=sim.data$Y,G=sim.data$G,psi=rep(1,100),niter=500)
res <- gibbs_single_var_cpp(K=3,Y=sim.data$Y,G=sim.data$G,prior_s = 200,prior_r = 0.1,niter=500)
plot_beta = function(beta.mtx,title_names){
plot(beta.mtx[,1],type = 'l',col=1,ylim = c(min(beta.mtx),max(beta.mtx)),
main = paste('Beta Vector',title_names))
for (i in 2:ncol(beta.mtx)){
lines(1:nrow(beta.mtx),beta.mtx[,i],col=i)
}
}
match_F = function(beta.mean,F_consensus,F_true){
P = nrow(F_true)
K = ncol(F_true)
indx <- which.max(abs(beta.mean))
F_consensus <- F_consensus
# for (indx in 1:K){
consensus_nonzeros <- (1:P)[F_consensus[,indx]>0.5]
intersect_len <- length(intersect((1:P)[F_true[,1]>0], consensus_nonzeros))
precision = intersect_len/length(consensus_nonzeros)
recall = intersect_len/sum(F_true[,1]>0)
print(paste('Factor', indx))
print(paste0('Precision:', signif(precision, digits = 3), ', Recall:', signif(recall, digits = 3)))
# }
}
trial=1
plot_beta(t(res$beta_samples),paste('diff pi, trial',trial))
qplot(res$F_consensus[,1])
qplot(res$F_consensus[,3])
match_F(res$beta_mean,res$F_consensus,sim.data$F)
sim.data <- data_gen(seed=seed, N=500, P=100, K=3, beta_true=c(0.5,0,0),
sigma_w2_true=c(1,1
,1), pi_true=c(0.8,0.5,0.2), psi_true=1)
print(seed)
sim.data <- data_gen(seed=seed, N=500, P=100, K=3, beta_true=c(0.5,0,0),
sigma_w2_true=c(1,1,1), pi_true=c(0.8,0.5,0.2), psi_true=1)
res <- gibbs_single_var_cpp(K=3,Y=sim.data$Y,G=sim.data$G,prior_s = 200,prior_r = 0.1,niter=500)
plot_beta(t(res$beta_samples),paste('diff pi, trial',trial))
sim.data <- data_gen(seed=seed, N=500, P=1000, K=3, beta_true=c(0.5,0,0),
sigma_w2_true=c(1,1,1), pi_true=c(0.8,0.5,0.2), psi_true=1)
res <- gibbs_single_var_cpp(K=3,Y=sim.data$Y,G=sim.data$G,prior_s = 200,prior_r = 0.1,niter=500)
plot_beta(t(res$beta_samples),paste('diff pi, trial',trial))
match_F(res$beta_mean,res$F_consensus,sim.data$F)
res_lst[[trial]] = res
sim.data <- data_gen(seed=seed, N=500, P=600, K=3, beta_true=c(0.5,0.2,0),
sigma_w2_true=c(1,1,1), pi_true=c(0.8,0.5,0.2), psi_true=1)
# res <- gibbs_single_var_cpp(K=3,Y=sim.data$Y,G=sim.data$G,psi=rep(1,100),niter=500)
res <- gibbs_single_var_cpp(K=3,Y=sim.data$Y,G=sim.data$G,prior_s = 200,prior_r = 0.1,niter=500)
plot_beta(t(res$beta_samples),paste('diff pi, trial',trial))
match_F(res$beta_mean,res$F_consensus,sim.data$F)
?write.table()
knitr::opts_chunk$set(echo = TRUE,warning = F,message = F,comment = NA,
fig.width=6, fig.height=4, fig.align = 'center')
suppressMessages(library(airway))
suppressMessages(library(DESeq2))
data(airway)
dds <- DESeqDataSet(airway, design= ~ cell + dex)
design(dds) <- ~ cell + dex
dds$dex <- relevel(dds$dex, "untrt")
dds <- DESeq(dds)
res <- results(dds)
head(res)
res$log2FoldChange[1:5]
data_gen <- function(N,P,K,seed,beta_true,sigma_w2_true,pi_true,psi_true){
set.seed(seed)
G <- rbinom(N,1,0.5)
Phi <- matrix(rnorm(N*K,0,1),nrow = N, ncol = K) # Phi is fixed at ~ N(0,1)
Z_true <- outer(G,beta_true,FUN = '*') + Phi
# U_true <- matrix(rnorm(P*K,mean=0,sd=sqrt(sigma_w2_true)),nrow = P,ncol = K)
U_true <- matrix(0,nrow = P,ncol = K)
F_true <- matrix(0,nrow = P,ncol = K)
for (k in 1:K){
U_true[,k] <- rnorm(P,mean=0,sd=sqrt(sigma_w2_true[k]))
F_true[,k] <- rbinom(P,1,pi_true[k])
}
# F_true <- matrix(rbinom(P*K,1,pi_true),nrow = P,ncol = K)
W_true <- F_true*U_true
E <- matrix(rnorm(N*P,mean = 0,sd = sqrt(psi_true)),nrow = N, ncol = P)
Y <- Z_true%*%t(W_true) + E
return(list(G=G, Z=Z_true, U=U_true, F=F_true, Y=Y))
}
data_gen <- function(N,P,K,seed,beta_true,sigma_w2_true,pi_true,psi_true){
set.seed(seed)
G <- rbinom(N,1,0.5)
Phi <- matrix(rnorm(N*K,0,1),nrow = N, ncol = K) # Phi is fixed at ~ N(0,1)
Z_true <- outer(G,beta_true,FUN = '*') + Phi
# U_true <- matrix(rnorm(P*K,mean=0,sd=sqrt(sigma_w2_true)),nrow = P,ncol = K)
U_true <- matrix(0,nrow = P,ncol = K)
F_true <- matrix(0,nrow = P,ncol = K)
for (k in 1:K){
U_true[,k] <- rnorm(P,mean=0,sd=sqrt(sigma_w2_true[k]))
F_true[,k] <- rbinom(P,1,pi_true[k])
}
# F_true <- matrix(rbinom(P*K,1,pi_true),nrow = P,ncol = K)
W_true <- F_true*U_true
E <- matrix(rnorm(N*P,mean = 0,sd = sqrt(psi_true)),nrow = N, ncol = P)
Y <- Z_true%*%t(W_true) + E
return(list(G=G, Z=Z_true, U=U_true, F=F_true, Y=Y))
}
# source("~/Google Drive/Research/Factor_analysis/gibbs_func_1marker.R")
Rcpp::sourceCpp("~/Google Drive/Research/Factor_analysis/rcpp_tutorials/gibbs_one_marker.cpp")
sim.data <- data_gen(seed=seed, N=500, P=600, K=3, beta_true=c(0.5,0.2,0),
sigma_w2_true=c(1,1,1), pi_true=c(0.8,0.5,0.2), psi_true=1)
seed = 57380
sim.data <- data_gen(seed=seed, N=500, P=600, K=3, beta_true=c(0.5,0.2,0),
sigma_w2_true=c(1,1,1), pi_true=c(0.8,0.5,0.2), psi_true=1)
# res <- gibbs_single_var_cpp(K=3,Y=sim.data$Y,G=sim.data$G,psi=rep(1,100),niter=500)
res <- gibbs_single_var_cpp(K=3,Y=sim.data$Y,G=sim.data$G,prior_s = 200,prior_r = 0.1,niter=400)
plot_beta = function(beta.mtx,title_names){
plot(beta.mtx[,1],type = 'l',col=1,ylim = c(min(beta.mtx),max(beta.mtx)),
main = paste('Beta Vector',title_names))
for (i in 2:ncol(beta.mtx)){
lines(1:nrow(beta.mtx),beta.mtx[,i],col=i)
}
}
match_F = function(beta.mean,F_consensus,F_true){
P = nrow(F_true)
K = ncol(F_true)
indx <- which.max(abs(beta.mean))
F_consensus <- F_consensus
# for (indx in 1:K){
consensus_nonzeros <- (1:P)[F_consensus[,indx]>0.5]
intersect_len <- length(intersect((1:P)[F_true[,1]>0], consensus_nonzeros))
precision = intersect_len/length(consensus_nonzeros)
recall = intersect_len/sum(F_true[,1]>0)
print(paste('Factor', indx))
print(paste0('Precision:', signif(precision, digits = 3), ', Recall:', signif(recall, digits = 3)))
# }
}
plot_beta(t(res$beta_samples),paste('diff pi:','0.8,0.5,0.2'))
match_F(res$beta_mean,res$F_consensus,sim.data$F)
# res <- gibbs_single_var_cpp(K=3,Y=sim.data$Y,G=sim.data$G,psi=rep(1,100),niter=500)
res_r0.5 <- gibbs_single_var_cpp(K=3,Y=sim.data$Y,G=sim.data$G,prior_s = 200,prior_r = 0.5,niter=400)
dim(sim.data$F)
colSums(sim.data$F>0)
colSums(sim.data$F>0)/600
plot_beta(t(res_r0.5$beta_samples),paste('diff pi:','0.8,0.5,0.2'))
match_F(res_r0.5$beta_mean,res_r0.5$F_consensus,sim.data$F)
sum(res$F_consensus[,1]>0.5)
sum(sim.data$F[,1]>0.5)
428/600
473/600
res_r0.1 = res_r0.1
res_r0.1 = res
# res <- gibbs_single_var_cpp(K=3,Y=sim.data$Y,G=sim.data$G,psi=rep(1,100),niter=500)
res_r0.01 <- gibbs_single_var_cpp(K=3,Y=sim.data$Y,G=sim.data$G,prior_s = 200,prior_r = 0.01,niter=400)
plot_beta(t(res_r0.01$beta_samples),paste('diff pi:','0.8,0.5,0.2'))
match_F(res_r0.01$beta_mean,res_r0.01$F_consensus,sim.data$F)
res_r0.01$pi_vec
res_r0.1$pi_vec
res_r0.5$pi_vec
c(0.8,0.5,0.2)
curve(expr =x, dbeta(x,shape1 = 200*0.1,shape2 = 200*(1-0.1)),from = 0,to = 1)
curve(dbeta(x,shape1 = 200*0.1,shape2 = 200*(1-0.1)),from = 0,to = 1)
curve(dbeta(x,shape1 = 200*0.5,shape2 = 200*(1-0.5)),from = 0,to = 1)
curve(dbeta(x,shape1 = 200*0.8,shape2 = 200*(1-0.8)),from = 0,to = 1)
curve(dbeta(x,shape1 = 100*0.5,shape2 = 100*(1-0.5)),from = 0,to = 1)
curve(dbeta(x,shape1 = 50*0.5,shape2 = 50*(1-0.5)),from = 0,to = 1)
# res <- gibbs_single_var_cpp(K=3,Y=sim.data$Y,G=sim.data$G,psi=rep(1,100),niter=500)
res_wide <- gibbs_single_var_cpp(K=3,Y=sim.data$Y,G=sim.data$G,prior_s = 50,prior_r = 0.5,niter=400)
res_wide$pi_vec
res_r0.5$pi_vec
plot_beta(t(res_wide$beta_samples),paste('diff pi:','0.8,0.5,0.2'))
match_F(res_wide$beta_mean,res_wide$F_consensus,sim.data$F)
plot_beta(t(res_r0.5$beta_samples),paste('diff pi:','0.8,0.5,0.2'))
match_F(res_r0.5$beta_mean,res_r0.5$F_consensus,sim.data$F)
sum(res_wide$F_consensus[,1]>0.5)
sum(res_r0.5$F_consensus[,1]>0.5)
c(437/600,434/600)
# res <- gibbs_single_var_cpp(K=3,Y=sim.data$Y,G=sim.data$G,psi=rep(1,100),niter=500)
res_k2_r0.5 <- gibbs_single_var_cpp(K=2,Y=sim.data$Y,G=sim.data$G,prior_s = 200,prior_r = 0.5,niter=400)
rm
rm(res)
plot_beta(t(res_k2_r0.5$beta_samples),paste('diff pi:','0.8,0.5,0.2'))
res_k2_r0.5$beta_mean
res_k2_r0.5$pi_vec
res_r0.5$beta_mean
res_r0.5$pi_vec
plot_beta(t(res_k2_r0.5$beta_samples),paste('diff pi:','0.8,0.5,0.2'))
match_F(res_k2_r0.5$beta_mean,res_k2_r0.5$F_consensus,sim.data$F)
sim.data <- data_gen(seed=seed, N=500, P=600, K=3, beta_true=c(0.5,0.2,0.2),
sigma_w2_true=c(1,1,1), pi_true=c(0.8,0.5,0.2), psi_true=1)
rm(res_r0.01,res_r0.1,res_r0.5,res_wide)
# res <- gibbs_single_var_cpp(K=3,Y=sim.data$Y,G=sim.data$G,psi=rep(1,100),niter=500)
res_r0.5 <- gibbs_single_var_cpp(K=3,Y=sim.data$Y,G=sim.data$G,prior_s = 200,prior_r = 0.5,niter=400)
# res <- gibbs_single_var_cpp(K=3,Y=sim.data$Y,G=sim.data$G,psi=rep(1,100),niter=500)
res_k2_r0.5 <- gibbs_single_var_cpp(K=2,Y=sim.data$Y,G=sim.data$G,prior_s = 200,prior_r = 0.5,niter=400)
res_r0.5$pi_vec
res_k2_r0.5$pi_vec
res_r0.5$beta_mean
res_k2_r0.5$beta_mean
sim.data <- data_gen(seed=seed, N=500, P=600, K=3, beta_true=c(0.5,0.2,0.1),
sigma_w2_true=c(1,1,1), pi_true=c(0.2,0.5,0.8), psi_true=1)
# res <- gibbs_single_var_cpp(K=3,Y=sim.data$Y,G=sim.data$G,psi=rep(1,100),niter=500)
res_k2_r0.5 <- gibbs_single_var_cpp(K=2,Y=sim.data$Y,G=sim.data$G,prior_s = 200,prior_r = 0.5,niter=400)
# res <- gibbs_single_var_cpp(K=3,Y=sim.data$Y,G=sim.data$G,psi=rep(1,100),niter=500)
res_r0.5 <- gibbs_single_var_cpp(K=3,Y=sim.data$Y,G=sim.data$G,prior_s = 200,prior_r = 0.5,niter=400)
res_k2_r0.5$pi_vec
res_r0.5$pi_vec
res_k2_r0.5$beta_mean
res_r0.5$beta_mean
match_F(res_r0.5$beta_mean,res_r0.5$F_consensus,sim.data$F)
match_F(res_k2_r0.5$beta_mean,res_k2_r0.5$F_consensus,sim.data$F)
plot_beta(t(res_r0.5$beta_samples),paste('diff pi:','0.2,0.5,0.8'))
plot_beta(t(res_k2_r0.5$beta_samples),paste('diff pi:','0.2,0.5,0.8'))
res_k2_r0.5$pi_vec
res_r0.5$pi_vec
sim.data <- data_gen(seed=seed, N=500, P=600, K=3, beta_true=c(0.5,0.2,0),
sigma_w2_true=c(1,1,1), pi_true=c(0.2,0.5,0.8), psi_true=1)
# res <- gibbs_single_var_cpp(K=3,Y=sim.data$Y,G=sim.data$G,psi=rep(1,100),niter=500)
res_r0.5 <- gibbs_single_var_cpp(K=3,Y=sim.data$Y,G=sim.data$G,prior_s = 200,prior_r = 0.5,niter=400)
res_k2_r0.5 <- gibbs_single_var_cpp(K=2,Y=sim.data$Y,G=sim.data$G,prior_s = 200,prior_r = 0.5,niter=400)
res_r0.5$beta_mean
res_k2_r0.5$beta_mean
res_r0.5$pi_vec
res_k2_r0.5$pi_vec
cbind(res_r0.5$beta_mean, res_r0.5$pi_vec)
cbind(res_k2_r0.5$beta_mean, res_k2_r0.5$pi_vec)
match_F(res_r0.5$beta_mean,res_r0.5$F_consensus,sim.data$F)
match_F(res_k2_r0.5$beta_mean,res_k2_r0.5$F_consensus,sim.data$F)
res_k2_r0.5_s50 <- gibbs_single_var_cpp(K=2,Y=sim.data$Y,G=sim.data$G,prior_s = 50,prior_r = 0.5,niter=400)
cbind(res_k2_r0.5_s50$beta_mean, res_k2_r0.5_s50$pi_vec)
match_F(res_k2_r0.5_s50$beta_mean,res_k2_r0.5_s50$F_consensus,sim.data$F)
summary(lm(res_k2_r0.5$Z_last[,2] ~ sim.data$G))
summary(lm(res_k2_r0.5$Z_last[,2] ~ sim.data$G))
summary(lm(res_r0.5$Z_last[,1] ~ sim.data$G))
summary(lm(res_r0.5$Z_last[,3] ~ sim.data$G))
summary(lm(res_k2_r0.5$Z_last[,2] ~ sim.data$G))
cor(res_k2_r0.5$Z_last[,2],sim.data$G)
cor(res_r0.5$Z_last[,3],sim.data$G)
cbind(res_k2_r0.5$beta_mean, res_k2_r0.5$pi_vec)
cbind(res_r0.5$beta_mean, res_r0.5$pi_vec)
length(intersect((1:P)[F_true[,2]>0], (1:P)[res_k2_r0.5$F_consensus[,2]>0.5]))
P=600
length(intersect((1:P)[F_true[,2]>0], (1:P)[res_k2_r0.5$F_consensus[,2]>0.5]))
length(intersect((1:P)[sim.data$F_true[,2]>0], (1:P)[res_k2_r0.5$F_consensus[,2]>0.5]))
length(intersect((1:P)[sim.data$F[,2]>0], (1:P)[res_k2_r0.5$F_consensus[,2]>0.5]))
sum(sim.data$F[,2]>0)
267/306
sum(res_k2_r0.5$F_consensus[,2]>0.5)
summary(lm(res_k2_r0.5$Z_last[,1] ~ sim.data$G))
summary(lm(res_r0.5$Z_last[,1] ~ sim.data$G))
summary(lm(res_r0.5$Z_last[,2] ~ sim.data$G))
summary(lm(res_r0.5$Z_last[,3] ~ sim.data$G))
res_k2_r0.2 <- gibbs_single_var_cpp(K=2,Y=sim.data$Y,G=sim.data$G,prior_s = 200,prior_r = 0.2,niter=400)
res_k2_r0.2$pi_vec
res_k2_r0.5$pi_vec
plot_beta(t(res_k2_r0.2$beta_samples),paste('diff pi:','0.8,0.5,0.2'))
length(intersect((1:P)[sim.data$F[,1]>0], (1:P)[res_k2_r0.5$F_consensus[,2]>0.5]))
length(intersect((1:P)[sim.data$F[,2]>0], (1:P)[res_k2_r0.5$F_consensus[,2]>0.5]))
sum(sim.data$F[,1]>0)
70/127
sum(res_k2_r0.5$F_consensus[,2]>0.5)
length(intersect((1:P)[sim.data$F[,1]>0], (1:P)[sim.data$F[,2]>0])
)
length(intersect((1:P)[sim.data$F[,1]>0], (1:P)[sim.data$F[,3]>0]))
length(intersect((1:P)[sim.data$F[,2]>0], (1:P)[sim.data$F[,3]>0]))
sum(sim.data$F[,3]>0)
knitr::opts_chunk$set(echo = TRUE,warning = F,message = F,comment = NA,
fig.width=6, fig.height=4, fig.align = 'center')
suppressMessages(library(airway))
suppressMessages(library(DESeq2))
data(airway)
dds <- DESeqDataSet(airway, design= ~ cell + dex)
design(dds) <- ~ cell + dex
dds$dex <- relevel(dds$dex, "untrt")
dds <- DESeq(dds)
res <- results(dds)
dds2 <- DESeqDataSet(airway, design= ~ cell)
design(dds2)
dds2$dex <- relevel(dds2$dex, "untrt")
dds2 <- DESeq(dds2)
res2 <- results(dds2)
head(res)
head(res2)
summary(res)
summary(res2)
knitr::opts_chunk$set(echo = TRUE)
suppressMessages(library(airway))
suppressMessages(library(DESeq2))
data(airway)
dds <- DESeqDataSet(airway, design= ~ cell + dex)
design(dds) <- ~ cell + dex
dds$dex <- relevel(dds$dex, "untrt")
dds <- DESeq(dds)
res <- results(dds)
suppressMessages(library(org.Hs.eg.db))
suppressMessages(library(DOSE))
suppressMessages(library(pathview))
suppressMessages(library(purrr))
suppressMessages(library(clusterProfiler))
suppressMessages(library(enrichplot))
suppressMessages(library(annotables))
res <- na.omit(res)
res_de <- subset(res, padj < 0.05)
res_de.df <- as.data.frame(res_de)
dim(res_de)
head(res_de.df)
geneList = res$log2FoldChange
gene_name = rownames(res)
names(geneList) = rownames(res)
geneList.df <- bitr(names(geneList), fromType = 'ENSEMBL', toType = 'ENTREZID',
OrgDb = org.Hs.eg.db)
View(geneList.df)
gene <- rownames(res_de.df)
gene <- rownames(res_de.df)
gene.df <- bitr(gene, fromType = "ENSEMBL", toType = c("ENTREZID", "SYMBOL"),
OrgDb = org.Hs.eg.db)
ego <- enrichGO(gene          = gene,
universe      = names(geneList),
OrgDb         = org.Hs.eg.db,
ont           = "CC",
pAdjustMethod = "BH",
pvalueCutoff  = 0.01,
qvalueCutoff  = 0.05,
readable      = TRUE)
head(ego)
ego <- enrichGO(gene          = gene.df$ENTREZID,
universe      = geneList.df$ENTREZID,
OrgDb         = org.Hs.eg.db,
ont           = "CC",
pAdjustMethod = "BH",
pvalueCutoff  = 0.01,
qvalueCutoff  = 0.05,
readable      = TRUE)
head(ego)
dotplot(ego)
cnetplot(ego, categorySize="pvalue", foldChange=geneList, showCategory = 10)
cnetplot(ego, categorySize="pvalue", foldChange=geneList, showCategory = 5)
cnetplot(ego, categorySize="pvalue", foldChange=geneList, showCategory = 10)
goplot(ego,showCategory = 10)
?cnetplot
cnetplot(ego, categorySize="pvalue", foldChange=geneList, showCategory = 10, node_label = F)
goplot(ego,showCategory = 10)
dotplot(ego)
cnetplot(ego, categorySize="pvalue", foldChange=geneList, showCategory = 10)
cnetplot(ego, categorySize="pvalue", foldChange=geneList, showCategory = 10,
node_label=F)
goplot(ego,showCategory = 10)
cis_gene.df <- read.table('~/Downloads/ASoC/Manuscript/submission_10Jan2020/cis_gene_DE_500kb.txt',
sep = '\t', header = T, stringsAsFactors = F)
cis_gene.df <- read.table('~/Downloads/ASoC/Manuscript/submission_10Jan2020/cis_gene_DE_500kb.txt',
sep = '\t', header = T, stringsAsFactors = F)
library(dplyr)
cis_gene.df <- read.table('~/Downloads/ASoC/Manuscript/submission_10Jan2020/cis_gene_DE_500kb.txt',
sep = '\t', header = T, stringsAsFactors = F)
filter(cis_gene.df,Empirical_Pvalue<0.05)
filter(cis_gene.df,Empirical_Pvalue<0.05)
unique(filter(cis_gene.df,Empirical_Pvalue<0.05)$Locus_SNP)
unique(filter(cis_gene.df,Empirical_Pvalue<0.05)$gRNA_name)
cis_gene.df$fdr = p.adjust(cis_gene.df$Empirical_Pvalue, method = 'fdr')
filter(cis_gene.df,Empirical_Pvalue<0.05)
0.05/307
unique(filter(cis_gene.df,Empirical_Pvalue<0.05)$Cis.Gene.Name)
View(cis_gene.df)
setwd("~/Downloads/ASoC/Manuscript/code/celltype_specific_analysis")
# Plotting (Fig 1E, Fig S10) ####
ASoC_spec.access = readRDS('data/neuron_spec_ASoC_peak_access_rpkm.rds')
convert.tb = data.frame(orig = names(ASoC_spec.access),
new = c('NPC','iN-Glut','iN-DN','iN-GA'))
names(ASoC_spec.access)
A="NSC"
ASoC_spec.not_ips = ASoC_spec.access[[A]]
A_new = convert.tb$new[convert.tb$orig==A]
peak_diff = data.frame(fread(paste0('peak_differential_analysis/',A,'_vs_iPS_peak_edgeR_res.txt'),
sep = '\t',header = T),row.names = 1)
peak_diff$peak_name = rownames(peak_diff)
ASoC_spec.not_ips = inner_join(ASoC_spec.not_ips,peak_diff,by='peak_name')
library(data.table)
library(tidyverse)
library(GenomicRanges)
library(ggplot2)
options(stringsAsFactors = F)
ASoC_spec.not_ips = ASoC_spec.access[[A]]
A_new = convert.tb$new[convert.tb$orig==A]
peak_diff = data.frame(fread(paste0('peak_differential_analysis/',A,'_vs_iPS_peak_edgeR_res.txt'),
sep = '\t',header = T),row.names = 1)
peak_diff$peak_name = rownames(peak_diff)
ASoC_spec.not_ips = inner_join(ASoC_spec.not_ips,peak_diff,by='peak_name')
xmax = max(ASoC_spec.not_ips[[A]])
ymax = max(ASoC_spec.not_ips$ips)
ggplot(ASoC_spec.not_ips,aes_string(x=A,y='ips')) + geom_point() +
# geom_abline(slope = 1, intercept = -1, color = 'blue', linetype="dashed") +
# geom_abline(slope = 1, intercept = 1, color = 'blue', linetype="dashed") +
geom_abline(slope = 1, intercept = 0, color = 'blue') +
scale_x_continuous(# name = paste('Accessibility in',A_new,'(log2 ATAC-seq peak RPKM)'),
name = bquote('Accessibility in'~.(A_new)~'('~log[2]~'ATAC-seq peak RPKM'~')'),
expand = c(0, 0), breaks = seq(0,6,1), limits = c(0,7+0.1)) +
scale_y_continuous(name = bquote('Accessibility in iPS ('~log[2]~'ATAC-seq peak RPKM'~')'),
expand = c(0, 0), limits = c(0,ymax+0.1)) +
theme_classic() + theme(axis.title = element_text(size = 16),
axis.text = element_text(size = 14)) +
annotate('polygon',x=c(0,0,1,ymax+1.1,ymax-0.9), y=c(1,0,0,ymax+0.1,ymax+0.1),
fill="blue", alpha=0.2)
convert.tb = data.frame(orig = names(ASoC_spec.access),
new = c('NPC','iN-Glut','iN-DN','iN-GA'))
A_new = convert.tb$new[convert.tb$orig==A]
ggplot(ASoC_spec.not_ips,aes_string(x=A,y='ips')) + geom_point() +
# geom_abline(slope = 1, intercept = -1, color = 'blue', linetype="dashed") +
# geom_abline(slope = 1, intercept = 1, color = 'blue', linetype="dashed") +
geom_abline(slope = 1, intercept = 0, color = 'blue') +
scale_x_continuous(# name = paste('Accessibility in',A_new,'(log2 ATAC-seq peak RPKM)'),
name = bquote('Accessibility in'~.(A_new)~'('~log[2]~'ATAC-seq peak RPKM'~')'),
expand = c(0, 0), breaks = seq(0,6,1), limits = c(0,7+0.1)) +
scale_y_continuous(name = bquote('Accessibility in iPS ('~log[2]~'ATAC-seq peak RPKM'~')'),
expand = c(0, 0), limits = c(0,ymax+0.1)) +
theme_classic() + theme(axis.title = element_text(size = 16),
axis.text = element_text(size = 14)) +
annotate('polygon',x=c(0,0,1,ymax+1.1,ymax-0.9), y=c(1,0,0,ymax+0.1,ymax+0.1),
fill="blue", alpha=0.2)
names(ASoC_spec.access)
scatterplot = ggplot(ASoC_spec.not_ips,aes_string(x=A,y='ips')) + geom_point() +
geom_abline(slope = 1, intercept = 0, color = 'blue') +
scale_x_continuous(# name = paste('Accessibility in',A_new,'(log2 ATAC-seq peak RPKM)'),
name = bquote('Accessibility in'~.(A_new)~'('~log[2]~'ATAC-seq peak RPKM'~')'),
expand = c(0, 0), breaks = seq(0,6,1), limits = c(0,7+0.1)) +
scale_y_continuous(name = bquote('Accessibility in iPS ('~log[2]~'ATAC-seq peak RPKM'~')'),
expand = c(0, 0), limits = c(0,ymax+0.1)) +
theme_classic() + theme(axis.title = element_text(size = 16),
axis.text = element_text(size = 14)) +
annotate('polygon',x=c(0,0,1,ymax+1.1,ymax-0.9), y=c(1,0,0,ymax+0.1,ymax+0.1),
fill="blue", alpha=0.2)
ggsave(paste0('Figs/',A,'_spec_ASoC_peak_access.rpkm_vs_iPS.pdf'),
scatterplot,width = 6,height = 5)
ggsave(paste0('Figs/',A,'_spec_ASoC_peak_access.rpkm_vs_iPS.pdf'),
scatterplot,width = 6,height = 5)
A='NSC'
print(paste('Cell type:',A))
infile <- paste0('celltype_spec_ASoC/ASoC_',A,'_specific.IPS.bed')
ASoC_spec.not_ips <- read.table(infile,header = T)
View(ASoC_spec.not_ips)
max(ASoC_spec.not_ips$pBinom)
for (A in names(ASoC_spec.access)){
ASoC_spec.not_ips = ASoC_spec.access[[A]]
A_new = convert.tb$new[convert.tb$orig==A]
peak_diff = data.frame(fread(paste0('peak_differential_analysis/',A,'_vs_iPS_peak_edgeR_res.txt'),
sep = '\t',header = T),row.names = 1)
peak_diff$peak_name = rownames(peak_diff)
ASoC_spec.not_ips = inner_join(ASoC_spec.not_ips,peak_diff,by='peak_name')
xmax = max(ASoC_spec.not_ips[[A]])
ymax = max(ASoC_spec.not_ips$ips)
scatterplot = ggplot(ASoC_spec.not_ips,aes_string(x=A,y='ips')) + geom_point() +
geom_abline(slope = 1, intercept = 0, color = 'blue') +
scale_x_continuous(name = bquote('Accessibility in'~.(A_new)~'('~log[2]~'ATAC-seq peak RPKM'~')'),
expand = c(0, 0), breaks = seq(0,6,1), limits = c(0,7+0.1)) +
scale_y_continuous(name = bquote('Accessibility in iPS ('~log[2]~'ATAC-seq peak RPKM'~')'),
expand = c(0, 0), limits = c(0,ymax+0.1)) +
theme_classic() + theme(axis.title = element_text(size = 16),
axis.text = element_text(size = 14)) +
annotate('polygon',x=c(0,0,1,ymax+1.1,ymax-0.9), y=c(1,0,0,ymax+0.1,ymax+0.1),
fill="blue", alpha=0.2)
ggsave(paste0('Figs/',A,'_spec_ASoC_peak_access.rpkm_vs_iPS.pdf'),
scatterplot,width = 8,height = 7)
}
